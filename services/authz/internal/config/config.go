package config

// This file is generated by hatmax. Do not edit.

import (
	"fmt"
	"os"

	"github.com/knadh/koanf/parsers/yaml"
	"github.com/knadh/koanf/providers/posflag"
	"github.com/knadh/koanf/providers/rawbytes"
	"github.com/knadh/koanf/v2"
	"github.com/spf13/pflag"
)

type Config struct {
	Log      LogConfig      `koanf:"log"`
	Server   ServerConfig   `koanf:"server"`
	Database DatabaseConfig `koanf:"database"`
	Auth     AuthConfig     `koanf:"auth"`
}

type ServerConfig struct {
	Port string `koanf:"port"`
}

type DatabaseConfig struct {
	Path          string `koanf:"path"`
	MongoURL      string `koanf:"mongo_url"`
	MongoDatabase string `koanf:"mongo_database"`
}

type LogConfig struct {
	Level string `koanf:"level"`
}

type AuthConfig struct {
	EncryptionKey   string `koanf:"encryption.key"`
	SigningKey      string `koanf:"signing.key"`
	SessionTTL      string `koanf:"session.ttl"`
	TokenPrivateKey string `koanf:"token.private.key"`
	TokenPublicKey  string `koanf:"token.public.key"`
}

func New() *Config {
	return &Config{
		Server: ServerConfig{
			Port: ":8082",
		},
		Database: DatabaseConfig{
			Path:          "./auth.db",
			MongoURL:      "mongodb://localhost:27017",
			MongoDatabase: "auth",
		},
		Log: LogConfig{
			Level: "info",
		},
		Auth: AuthConfig{
			EncryptionKey:   "change-me-32-byte-key-for-aes-gcm",
			SigningKey:      "change-me-signing-key-for-hmac",
			SessionTTL:      "24h",
			TokenPrivateKey: "",
			TokenPublicKey:  "",
		},
	}
}

// LoadConfig loads configuration from YAML, then overrides with environment variables, then flags.
func LoadConfig(path, envPrefix string, args []string) (*Config, error) {
	k := koanf.New(".")
	cfg := New()

	// Setup pflag
	fs := pflag.NewFlagSet(args[0], pflag.ExitOnError)
	fs.String("server.port", ":8082", "Server listen address")
	fs.String("database.path", "./auth.db", "Path to the SQLite database file")
	fs.String("log.level", "info", "Log level (debug, info, error)")
	fs.String("auth.encryption_key", "change-me-32-byte-key-for-aes-gcm", "AES-GCM encryption key")
	fs.String("auth.signing_key", "change-me-signing-key-for-hmac", "HMAC signing key")
	fs.String("auth.session_ttl", "24h", "Session TTL duration")
	fs.String("auth.token_private_key", "", "Ed25519 private key for tokens (base64)")
	fs.String("auth.token_public_key", "", "Ed25519 public key for tokens (base64)")
	fs.Parse(args[1:])

	// Load YAML configuration first
	raw, err := os.ReadFile(path)
	if err != nil {
		return nil, fmt.Errorf("cannot read config file: %w", err)
	}
	expanded := []byte(os.ExpandEnv(string(raw)))
	if err := k.Load(rawbytes.Provider(expanded), yaml.Parser()); err != nil {
		return nil, fmt.Errorf("cannot parse yaml: %w", err)
	}

	// Load command-line flags
	if err := k.Load(posflag.Provider(fs, ".", k), nil); err != nil {
		return nil, fmt.Errorf("cannot load flags: %w", err)
	}

	// Unmarshal YAML+flags config
	if err := k.Unmarshal("", cfg); err != nil {
		return nil, fmt.Errorf("cannot unmarshal config: %w", err)
	}

	// Manual environment variable override (Koanf precedence is unreliable)
	if val := os.Getenv("AUTHZ_ENCRYPTION_KEY"); val != "" {
		cfg.Auth.EncryptionKey = val
	}
	if val := os.Getenv("AUTHZ_SIGNING_KEY"); val != "" {
		cfg.Auth.SigningKey = val
	}
	if val := os.Getenv("AUTHZ_SESSION_TTL"); val != "" {
		cfg.Auth.SessionTTL = val
	}
	if val := os.Getenv("AUTHZ_TOKEN_PRIVATE_KEY"); val != "" {
		cfg.Auth.TokenPrivateKey = val
	}
	if val := os.Getenv("AUTHZ_TOKEN_PUBLIC_KEY"); val != "" {
		cfg.Auth.TokenPublicKey = val
	}

	return cfg, nil
}
