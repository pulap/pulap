package config

// This file is generated by hatmax. Do not edit.

import (
	"fmt"
	"os"
	"strings"

	"github.com/knadh/koanf/parsers/yaml"
	"github.com/knadh/koanf/providers/env"
	"github.com/knadh/koanf/providers/posflag"
	"github.com/knadh/koanf/providers/rawbytes"
	"github.com/knadh/koanf/v2"
	"github.com/spf13/pflag"
)

type Config struct {
	Log      LogConfig      `koanf:"log"`
	Server   ServerConfig   `koanf:"server"`
	Database DatabaseConfig `koanf:"database"`
	Debug    DebugConfig    `koanf:"debug"`
}

type ServerConfig struct {
	Port string `koanf:"port"`
}

type DatabaseConfig struct {
	Path          string `koanf:"path"`
	MongoURL      string `koanf:"mongo_url"`
	MongoDatabase string `koanf:"mongo_database"`
}

type LogConfig struct {
	Level string `koanf:"level"`
}

type DebugConfig struct {
	Routes bool `koanf:"routes"`
}

func New() *Config {
	return &Config{
		Server: ServerConfig{
			Port: ":8085",
		},
		Database: DatabaseConfig{
			Path:          "./app.db",
			MongoURL:      "mongodb://localhost:27017",
			MongoDatabase: "fake",
		},
		Log: LogConfig{
			Level: "info",
		},
		Debug: DebugConfig{
			Routes: true,
		},
	}
}

// LoadConfig loads configuration from a YAML file, overrides with environment variables, and then with flags.
// 'path' is the path to the YAML config file.
// 'envPrefix' is the prefix for environment variables (e.g., "DICTIONARY_").
// 'args' are the command-line arguments (os.Args).
func LoadConfig(path, envPrefix string, args []string) (*Config, error) {
	k := koanf.New(".")
	cfg := New() // Start with defaults

	// Setup pflag
	fs := pflag.NewFlagSet(args[0], pflag.ExitOnError)
	fs.String("server.port", ":8085", "Server listen address")
	fs.String("database.path", "./app.db", "Path to the SQLite database file")
	fs.String("log.level", "info", "Log level (debug, info, error)")
	fs.Bool("debug.routes", true, "Expose /debug/routes endpoint")
	fs.Parse(args[1:])

	raw, err := os.ReadFile(path)
	if err != nil {
		return nil, fmt.Errorf("cannot read config file: %w", err)
	}
	expanded := []byte(os.ExpandEnv(string(raw)))

	if err := k.Load(rawbytes.Provider(expanded), yaml.Parser()); err != nil {
		return nil, fmt.Errorf("cannot parse yaml: %w", err)
	}

	if err := k.Load(env.Provider(envPrefix, ".", func(s string) string {
		return strings.Replace(strings.ToLower(
			strings.TrimPrefix(s, envPrefix)), "_", ".", -1)
	}), nil); err != nil {
		return nil, fmt.Errorf("cannot load env vars: %w", err)
	}

	// Load command-line flags with overrides.
	if err := k.Load(posflag.Provider(fs, ".", k), nil); err != nil {
		return nil, fmt.Errorf("cannot load flags: %w", err)
	}

	if err := k.Unmarshal("", cfg); err != nil {
		return nil, fmt.Errorf("cannot unmarshal config: %w", err)
	}

	return cfg, nil
}
